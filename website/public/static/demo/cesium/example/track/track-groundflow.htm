<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset='utf-8' />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <title>模型漫游</title>
    <!--引入第三方的jquery脚本库-->
    <script include="jquery" src="./static/libs/include-lib-local.js"></script>
    <script src="./static/libs/include-cesium-local.js"></script>
    <style type='text/css'>
        .ToolLib {
            border-radius: 3px;
            overflow: hidden;
            width: 100%;
            height: auto;
            box-shadow: 0 0 2px 1px #949292;
            text-align: center;
            z-index: 2001;
            border-color: #66ccff;
            border-bottom: 1px solid #949292;
            margin-bottom: 2px;
        }

        #GlobeView {
            top: 25px;
            width: 100%;
            height: 96%;
            position: absolute;
        }
    </style>
    <script>
        var webGlobe, viewer;
        //定义三维瓦片类
        var tileset;
        // 模型实体
        var modelEntity;
        //地图初始化函数
        function init() {
            //实例化要加载的source来源对象（世界矢量地图）
            //构造三维视图类（视图容器div的id，三维视图设置参数）
            webGlobe = new Cesium.WebSceneControl('GlobeView', {
                terrainExaggeration: 1,
            });
            viewer = webGlobe.viewer;
            webGlobe.appendGoogleMap('m@207000000');
            var positionArr = [];
            for (var i = 0; i <= 360; i += 45) {
                var radians = Cesium.Math.toRadians(i);
                positionArr.push([-112.0924 + (0.03 * 1.5 * Math.cos(radians)), 36.1476 + (0.03 * Math.sin(radians))]);
            }
            //模型URL地址、漫游点集、是否显示漫游路径、漫游时钟频率、漫游成功回调
            modelEntity = webGlobe.cruiseModelGround('./static/data/model/donghua.gltf', positionArr, true, 30, function (entities) {
                modelEntity = entities;
                webGlobe.viewer.trackedEntity = entities[entities.length - 1];
                webGlobe.viewer.zoomTo(entities, new Cesium.HeadingPitchRange(0, Cesium.Math.toRadians(-90)));
                /*开始漫游*/
                webGlobe.startCruiseModel();
                webGlobe.viewer.trackedEntity = modelEntity[modelEntity.length - 1];
            });
        }

        /*停止漫游*/
        function stopCruiseModel() {
            webGlobe.stopCruiseModel();
        }

        /*清空漫游*/
        function clearCruiseModel() {
            if (modelEntity) {
                webGlobe.clearCruiseModel(modelEntity);
            }

        }
    </script>
</head>

<body onload="init()">
    <div id="GlobeView"></div>
</body>

</html>