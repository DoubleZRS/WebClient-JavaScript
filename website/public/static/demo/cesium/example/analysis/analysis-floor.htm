<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset='utf-8' />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <title>洪水淹没分析</title>
    <!--引入第三方的jquery脚本库-->
    <script include="jquery" src="./static/libs/include-lib-local.js"></script>
    <!--引用Cesium脚本库文件-->
    <script src="./static/libs/include-cesium-local.js"></script>
    <!--当前示例页面样式表引用-->
    <link rel="stylesheet" href="./static/demo/cesium/style.css" />
    <script>
        //定义三维视图的主要类
        var webGlobe, viewer;
        //定义三维瓦片类
        var geobodyLayer;
        //定义交互式绘制矩形控件类
        var drawElement;
        //定义洪水淹没分析类
        var flood;
        //加载三维视图
        function init() {
            //构造三维视图类（视图容器div的id，三维视图设置参数）
            webGlobe = new Cesium.WebSceneControl('GlobeView', {
                terrainExaggeration: 1,
                infoBox: true,
            });
            viewer = webGlobe.viewer;
            if (webGlobe) {
                //添加Google影像地图
                webGlobe.appendGoogleMapExt({
                    ptype: 's@130'
                });
                //初始化视图功能管理类
                var sceneManager = new CesiumZondy.Manager.SceneManager({
                    viewer: webGlobe.viewer
                });
                //视点跳转
                sceneManager.flyToEx(114.40298522106733, 30.465568703723072, {
                    height: 100.85856618500283,
                    heading: -45.4940479913348135,
                    pitch: -15,
                    roll: 0
                });
                //构造M3D模型层管理对象
                var m3dLayer = new CesiumZondy.Layer.M3DLayer({
                    viewer: webGlobe.viewer
                });
                //加载M3D地图文档（服务地址，配置参数）
                geobodyLayer = m3dLayer.append('http://develop.smaryun.com:6163/igs/rest/g3d/ZondyModels', {
                    autoReset: false,
                    maximumScreenSpaceError: 8,
                    loaded: function(layer) {
                        //初始化交互式绘制控件
                        drawElement = new Cesium.DrawElement(webGlobe.viewer);
                        //激活交互式绘制工具
                        drawElement.startDrawingPolygon({
                            //绘制完成回调函数
                            callback: function(positions) {
                                if (flood) {
                                    webGlobe.scene.VisualAnalysisManager.remove(flood);
                                }
                                var array = new Array();
                                for (let i = 0; i < positions.length; i++) {
                                    let point = positions[i];
                                    let resPoint = new Cesium.Cartesian3;
                                    let invserTran = new Cesium.Matrix4;
                                    Cesium.Matrix4.inverse(geobodyLayer[0].root.transform, invserTran);
                                    Cesium.Matrix4.multiplyByPoint(invserTran, point, resPoint);
                                    array.push(new Cesium.Cartesian3(resPoint.x, resPoint.y, resPoint.z));
                                }
                                var hight = null;
                                for (var arraylength = 0; arraylength < array.length; arraylength++) {
                                    hight = hight < array[arraylength].z ? array[arraylength].z : hight;
                                }
                                var newArray = new Array();
                                for (var arraylength = 0; arraylength < array.length; arraylength++) {
                                    array[arraylength].z = hight;
                                    let point = array[arraylength];
                                    let resPoint = new Cesium.Cartesian3;
                                    let invserTran = new Cesium.Matrix4;
                                    Cesium.Matrix4.multiplyByPoint(geobodyLayer[0].root.transform, point, resPoint);
                                    newArray.push(new Cesium.Cartesian3(resPoint.x, resPoint.y, resPoint.z));
                                }
                                //初始化高级分析功能管理类
                                var advancedAnalysisManager = new CesiumZondy.Manager.AdvancedAnalysisManager({
                                    viewer: viewer
                                });
                                //初始化洪水淹没分析类
                                flood = advancedAnalysisManager.createFlood();
                                //设置洪水淹没分析区域点集
                                flood.dotsList = newArray;
                                //设置洪水淹没区域最底高度
                                flood.minHeight = Number(document.getElementById('minHeight').value <= 0 ? 0 : document.getElementById('minHeight').value);
                                //设置洪水淹没区域最高高度
                                flood.maxHeight = Number(document.getElementById('maxHeight').value <= 0 ? 30 : document.getElementById('maxHeight').value);
                                //设置洪水上涨速度
                                flood.floodSpeed = Number(document.getElementById('floodSpeed').value <= 0 ? 1 : document.getElementById('floodSpeed').value);
                                //水纹频率 指波浪的个数
                                flood.frequency = Number(document.getElementById('frequency').value <= 0 ? 1000 : document.getElementById('frequency').value);
                                //水纹速度
                                flood.animationSpeed = Number(document.getElementById('animationSpeed').value <= 0 ? 0.01 : document.getElementById('animationSpeed').value);
                                //水波的高度
                                flood.amplitude = Number(document.getElementById('amplitude').value <= 0 ? 10 : document.getElementById('amplitude').value);
                                //指定水面颜色 和 透明度
                                flood.floodColor = new Cesium.Color(0.2, 0.5, 0.4, 0.7);
                                // 指定光线强度
                                flood.specularIntensity = 3.0;
                                //添加洪水淹没结果显示
                                webGlobe.scene.VisualAnalysisManager.add(flood);
                            }

                        });
                    }
                });
            }
        }

        /*移除洪水淹没分析*/
        function stopFloodAnalysis() {
            //判断是否已有洪水淹没分析结果
            if (flood != undefined) {
                //移除洪水淹没分析显示结果
                webGlobe.scene.VisualAnalysisManager.remove(flood);
            }
            //取消交互式绘制矩形事件激活状态
            drawElement.stopDrawing();
            webGlobe.viewer.entities.removeAll();
        }
    </script>
</head>

<body onload="init()">
    <div id="GlobeView">
        <div class="message" style="left: 10px;">
            <p>参数</p>
            <span>
                <font>淹没最底高度:</font><input type="text" id="minHeight" value="0">
            </span></br>
            <span>
                <font>淹没最高高度:</font><input type="text" id="maxHeight" value="30">
            </span></br>
            <span>
                <font>洪水上涨速度:</font><input type="text" id="floodSpeed" value="1">
            </span></br>
            <span>
                <font>波浪个数:</font><input type="text" id="frequency" value="1000">
            </span></br>
            <span>
                <font>波浪速度:</font><input type="text" id="animationSpeed" value="0.01">
            </span></br>
            <span>
                <font>波浪高度:</font><input type="text" id="amplitude" value="10">
            </span></br>
        </div>
    </div>
</body>

</html>