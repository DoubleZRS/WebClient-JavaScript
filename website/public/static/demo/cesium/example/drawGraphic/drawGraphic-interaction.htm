<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset='utf-8' />
    <title>交互式图形绘制</title>
    <!--引用第三方的jQuery脚本库-->
    <script include="jquery" src="./static/libs/include-lib-local.js"></script>
    <!--引用Cesium脚本库文件-->
    <script src="./static/libs/include-cesium-local.js"></script>
    <!--引用示例页面样式表-->
    <link rel="stylesheet" href="./static/demo/cesium/style.css" />
    <script>
        //在JS脚本开发中使用严格代码规范模式，及时捕获一些不规范的行为，从而避免编程错误
        'use strict';

        //定义三维场景控件对象
        var webGlobe = undefined;
        //定义三维瓦片类
        var tileset;
        //定义实体绘制控制器对象
        var entityController;

        //加载三维场景
        function init() {
            //构造三维视图对象（视图容器div的id，三维视图设置参数）
            webGlobe = new Cesium.WebSceneControl('GlobeView', {});

            //构造视图功能管理对象（视图）
            var sceneManager = new CesiumZondy.Manager.SceneManager({
                viewer: webGlobe.viewer
            });
            //设置鼠标位置信息展示控件：经纬度、高程、视角高度（容器div的id）
            sceneManager.showPosition('coordinate_location');

            //添加Google影像地图
            webGlobe.appendGoogleMapExt({
                ptype: 's@130'
            });
            //加载IGS发布的M3D缓存地图文档
            tileset = webGlobe.append('http://develop.smaryun.com:6163/igs/rest/g3d/ZondyModels', {});

            //视点跳转（经度，纬度，视角高度，方位角，俯仰角，翻滚角）
            sceneManager.flyToEx(114.40298522106733, 30.465568703723072, {
                height: 100.85856618500283,
                heading: -45.4940479913348135,
                pitch: -15,
                roll: 0
            });

            //构造实体绘制控制器对象
            entityController = new CesiumZondy.Layer.EntityController({
                viewer: webGlobe.viewer
            });
        }

        /*绘制点*/
        function interactionDrawPnt() {
            removeEntities();
            //注册事件
            webGlobe.registerMouseEvent('LEFT_CLICK', function (movement) {
                //屏幕坐标转笛卡尔坐标
                var cartesian = webGlobe.viewer.getCartesian3Position(movement.position, cartesian);
                var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                var lng = Cesium.Math.toDegrees(cartographic.longitude);
                var lat = Cesium.Math.toDegrees(cartographic.latitude);
                var height = cartographic.height;//模型高度
                //添加点：经度、纬度、高程、名称、像素大小、颜色、外边线颜色、边线宽度
                entityController.appendPoint(lng, lat, height, '点', 10, webGlobe.getColor(1, 0, 0, 1), webGlobe.getColor(1, 1, 0, 1), 2);
            });
            webGlobe.registerMouseEvent('RIGHT_CLICK', function (e) {
                webGlobe.unRegisterMouseEvent('LEFT_CLICK');
                webGlobe.unRegisterMouseEvent('RIGHT_CLICK');
            });
        }

        /*绘制线*/
        function interactionDraw() {
            removeEntities();
            var pointArray = new Array();
            var allPoint = new Array();
            //注册事件
            webGlobe.registerMouseEvent('LEFT_CLICK', function (e) {
                //屏幕坐标转笛卡尔坐标
                var cartesian = webGlobe.viewer.getCartesian3Position(e.position, cartesian);
                var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                var lng = Cesium.Math.toDegrees(cartographic.longitude);
                pointArray.push(lng);
                allPoint.push(lng);
                var lat = Cesium.Math.toDegrees(cartographic.latitude);
                pointArray.push(lat);
                allPoint.push(lat);
                //模型高度
                var height = cartographic.height;
                pointArray.push(height);
                allPoint.push(height);
                //添加点
                if (pointArray.length > 3) {
                    entityController.appendLine('不贴地线', pointArray, 2, new Cesium.Color(1, 0, 0, 0.8), true, {});
                    pointArray = new Array();
                    pointArray.push(lng);
                    pointArray.push(lat);
                    pointArray.push(height);
                    webGlobe.viewer.entities.removeById('moveline');
                }
            });
            webGlobe.registerMouseEvent('MOUSE_MOVE', function (e) {
                webGlobe.viewer.entities.removeById('moveline');
                if (pointArray.length < 3) {
                    return;
                }
                var cartesian = webGlobe.viewer.getCartesian3Position(e.endPosition, cartesian);
                var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                var lng = Cesium.Math.toDegrees(cartographic.longitude);
                var lat = Cesium.Math.toDegrees(cartographic.latitude);
                var height = cartographic.height;
                var firstPosition = Cesium.Cartesian3.fromDegrees(pointArray[0], pointArray[1], pointArray[2]);
                var movePosition = Cesium.Cartesian3.fromDegrees(lng, lat, height);
                var redBox = webGlobe.viewer.entities.add({
                    id: 'moveline',
                    polyline: {
                        positions: [firstPosition, movePosition],
                        width: 2,
                        material: Cesium.Color.YELLOW
                    }
                });
            });
            webGlobe.registerMouseEvent('RIGHT_CLICK', function (e) {
                webGlobe.viewer.entities.removeAll();
                if (allPoint.length > 3) {
                    entityController.appendLine('不贴地线', allPoint, 2, new Cesium.Color(1, 0, 0, 0.8), true, {});
                }
                pointArray = new Array();
                allPoint = new Array();
                webGlobe.unRegisterMouseEvent('LEFT_CLICK');
                webGlobe.unRegisterMouseEvent('MOUSE_MOVE');
                webGlobe.unRegisterMouseEvent('RIGHT_CLICK');
            });
        }

        /*绘制多边形*/
        function interactionDrawPolygon() {
            removeEntities();
            var tool = new Cesium.DrawPolygonTool(webGlobe.viewer, getDrawResult);
            tool.activeTool();
        }
        /*绘制结果回调函数*/
        function getDrawResult(entity) {
            if (entity) {
                var ptype = entity.pType;
            }
        }

        /*移除绘制图形 */
        function removeEntities() {
            webGlobe.unRegisterMouseEvent('LEFT_CLICK');
            webGlobe.unRegisterMouseEvent('MOUSE_MOVE');
            webGlobe.unRegisterMouseEvent('RIGHT_CLICK');
            webGlobe.viewer.entities.removeAll();
        }
    </script>
</head>

<body onload="init()">
    <!--三维场景容器-->
    <div id='GlobeView'>
        <div class="message" style="top: 10px; left: 10px;">
            <button class="ButtonLib" id="drawpnt" onclick="interactionDrawPnt()">绘制点</button>
            <button class="ButtonLib" id="drawline" onclick="interactionDraw()">绘制线</button>
            <!-- <button class="ButtonLib" id="drawpolygon" onclick="interactionDrawPolygon()">绘制区</button> -->
            <button class="ButtonLib" id="remove" onclick="removeEntities()">移除</button>
        </div>
    </div>
    <!--位置信息容器-->
    <div id="coordinateDiv" class="coordinateClass">
        <label id="coordinate_location"></label>
    </div>
</body>

</html>