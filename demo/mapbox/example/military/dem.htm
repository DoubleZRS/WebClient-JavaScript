<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>DEM & Model</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <script
      include="jquery"
      src="../../libs/zondyclient/include-lib-local.js"
    ></script>
    <script
      include="threebox"
      src="../../libs/zondyclient/include-mapboxgl-local.js"
    ></script>
    <!--引入当前页面样式表-->
    <link
      href="../../css/mapboxgl/style.css"
      rel="stylesheet"
      type="text/css"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
      }
    </style>
  </head>

  <body>
    <div id="map"></div>
    <script>
      //使用严格模式
      "use strict";
      //
      var origin = [4.686205805789757, 36.12743569751477, 5];
      //mapbox服务数据的访问令牌，若使用mapbox提供的样式必须要设置令牌
      mapboxgl.accessToken =
        "pk.eyJ1Ijoid29ya2luZ2RvZyIsImEiOiJjamQyZmszenczMHRoMzRuczVzaGthbGhnIn0.HTkYTE-R82N3azqscSyHkA";
      //实例化Map对象加载地图
      var map = new mapboxgl.Map({
        //地图容器div的id
        container: "map",
        //mapbox提供的样式
        style:
          "http://192.168.10.185:6163/igs/rest/mrms/vtiles/styles/军测.json", // 使用MapBox官方的样式,
        //地图中心点
        center: origin,
        //地图当前缩放级数
        zoom: 16
      });

      //添加导航控件
      map.addControl(new mapboxgl.NavigationControl());

      //注册地图加载事件
      map.on("load", function() {
        addDem();
        addCar();
      });

      function addDem() {
        map.addSource("dem", {
          type: "raster-dem",
          url: "mapbox://mapbox.terrain-rgb"
        });
        map.addLayer(
          {
            id: "hillshading",
            source: "dem",
            type: "hillshade"
          },
          "水域陆地_F_160000_DN10500432_REG"
        );
      }

      var carmodel;
      var timestamp = 0,
        timeline;

      function addCar() {
        map.addLayer({
          id: "custom_model_car",
          type: "custom",
          onAdd: function(map, gl) {
            CarMode(map, gl);
          },
          render: function(gl, matrix) {
            threebox.update(Date.now(), "mbx");
          }
        });
      }

      function CarMode(map, gl) {
        window.threebox = new Threebox(map, gl);
        threebox.setupDefaultLights();

        var loader = new THREE.GLTFLoader();

        loader.load(
          "../../data/model/cesium/GroundVehicle/GroundVehicle.glb",
          function(gltf) {
            carmodel = gltf;
            // rotate object so it's sitting on its base
            carmodel.scene.rotation.x = -Math.PI * 1.5;
            carmodel.scene.scale.set(10, 10, 10);
            $.get("../../data/military/车辆轨迹.json", function(line) {
              timeline = line.features[0].geometry.coordinates;
              timeline[0].push(5);
              threebox.addAtCoordinate(carmodel.scene, timeline[0]);
              playAnimate();
            });
          }.bind(this)
        );
      }

      var lastframe = 0;

      function playAnimate() {
        timestamp++;
        var index = Math.floor(timestamp / 4);
        if (timestamp / 4 == lastframe) {
          requestAnimationFrame(playAnimate);
        } else {
          if (index >= timeline.length - 1) {
            index = 0;
            timestamp = 0;
          }
          timeline[index].push(5);
          var position = timeline[index];
          var rotate = calculateDirection(timeline[index], timeline[index + 1]);
          carmodel.scene.rotation.y = (-rotate * Math.PI) / 180;
          threebox.moveToCoordinate(carmodel.scene, position);
          map.setCenter({
            lng: position[0],
            lat: position[1]
          });
          requestAnimationFrame(playAnimate);
        }
      }

      function calculateDirection(p1, p2) {
        var dx, dy, da;
        var m_dDirection = 0;

        dx = p2[0] - p1[0];
        dy = p2[1] - p1[1];

        if (dx == 0) {
          if (dy > 0) m_dDirection = 0;
          else m_dDirection = 180;
        } else {
          if (dx > 0) {
            if (dy == 0) {
              m_dDirection = 90;
            } else {
              if (dy > 0) {
                da = Math.abs(dx / dy);
                m_dDirection = (Math.atan(da) * 180) / Math.PI;
              } else {
                if (dy < 0) {
                  da = Math.abs(dx / dy);
                  m_dDirection = (Math.atan(da) * 180) / Math.PI;
                  m_dDirection = 180 - m_dDirection;
                }
              }
            }
          } else {
            if (dy == 0) {
              m_dDirection = 270;
            } else {
              if (dy >= 0) {
                da = Math.abs(dx / dy);
                m_dDirection = (Math.atan(da) * 180) / Math.PI;
                m_dDirection = 360 - m_dDirection;
              } else {
                da = Math.abs(dx / dy);
                m_dDirection = (Math.atan(da) * 180) / Math.PI;
                m_dDirection = 180 + m_dDirection;
              }
            }
          }
        }
        return m_dDirection;
      }
    </script>
  </body>
</html>
