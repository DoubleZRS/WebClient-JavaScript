<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>网络分析（旧）</title>
    <link href="../../css/leaflet/style.css" rel="stylesheet" type="text/css"/>
    <script include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
    <script include="json" src="../../libs/zondyclient/include-leaflet-local.js"></script>
    <script type="text/javascript">
        //整个js文件都是严格模式下执行的
        "use strict";

        //定义全局变量
        var map;

        /** 地图初始化函数
         */
        function init() {
            //地图容器
            map = L.map('leaf_map', {
                //参考坐标系，默认是墨卡托坐标系（EPSG3857），EPSG4326为经纬度坐标系
                crs: L.CRS.EPSG4326,
                //显示中心
                center: [38.0359, 114.5000],
                //最小显示等级
                minZoom: 10,
                //最大显示等级
                maxZoom: 16,
                //当前显示等级
                zoom: 12
            });
            //矢量图层
            var layer = new Zondy.Map.MapVectorLayer("gdbp://MapGisLocal/sample/ds/网络分析/ncls/道路交通网", {
                //IGServer所在ip地址
                ip: "develop.smaryun.com",
                //IGServer请求端口号
                port: "6163",
                //设置图层能否重复显示。true代表显示唯一，false代表显示重复。
                noWrap: true,
                //缓存名称
                guid: (new Date()).getTime().toString()
            }).addTo(map);
        };

        /** 执行路径分析
         */
        function NetAnalysisOld() {
            var netAnalyParam = new Zondy.Service.NetAnalysis({
                //设置网络类URL
                netClsUrl: "gdbp://MapGisLocal/sample/ds/网络分析/ncls/道路交通网",
                //指定感兴趣路径点坐标序列
                flagPosStr: "114.44,38.06,114.56,38.03",
                //分析类型：用户自定义
                analyTp: 'UserMode',
                //设置网络类某些属性字段为权值字段
                weight: ",Weight1,Weight1",
                //网络类型：1/2:节点网标/线网标
                elementType: 2,
                //设置网标搜索半径
                nearDis: 0.01,
                //设置障碍点的坐标序列
                barrierPosStr: "",
                //返回格式
                outFormat: 'JSON',
                //IGServer所在ip地址
                ip: "develop.smaryun.com",
                //IGServer请求端口号
                port: "6163"
            });
            netAnalyParam.execute(netAnalysisSuccess, "POST");
        }

        /** 分析成功后的回调
         */
        function netAnalysisSuccess(data) {
            if (!data) {
                alert("网络分析失败，请检查参数！");
            }
            else {
                var dot;
                //轨迹坐标数组
                var pathArr = new Array();
                //结果描述信息
                var resDiv;
                //两点之间的距离
                var dis = 0;
                if (data.results[0].Value === null) {
                    return;
                }
                //返回的分析结果数据
                var resultObj = JSON.parse(data.results[0].Value);
                if (resultObj === null || resultObj.Paths === null) {
                    return;
                }
                //解析轨迹边坐标序列
                var pathObj = resultObj.Paths[0];
                var edgeNum = pathObj.Edges.length;
                //添加经过纠偏的起点
                if (resultObj.inputDots === null) {
                    return;
                }
                if (resultObj.inputDots[0].pDot === null || resultObj.inputDots[1] === null || resultObj.inputDots[1].pDot === null) {
                    return;
                }
                //路径分析的真实起点，即经过纠偏之后，线上网标或者点上网标点
                dot = [resultObj.inputDots[0].pDot.x, resultObj.inputDots[0].pDot.y];
                //结果描述信息
                if (dot[0] === 114.49 && dot[1] === 38.05) {
                    resDiv = '从<font color="#FF0000"><b>起点</b></font>(114.49,38.05 )<font color="#FF0000"><b>出发,</b></font>';
                    //添加起点到缓存数组
                    pathArr.push(dot);
                }
                else {
                    pathArr.push(dot);
                    resDiv = '从<font color="#0000FF"><b>当前位置</b></font>出发，';
                }
                //没有路径线信息时，用户直接步行到达指定地点
                if (edgeNum == 0) {
                    //纠偏起点与纠偏终点的距离
                    if (resultObj.inputDots[1].pDot.x !== resultObj.inputDots[0].pDot.x || resultObj.inputDots[1].pDot.y !== resultObj.inputDots[0].pDot.y) {
                        dis += getDistance(resultObj.inputDots[0].pDot, resultObj.inputDots[1].pDot);

                        dot = [resultObj.inputDots[1].pDot.x, resultObj.inputDots[1].pDot.y];
                        pathArr.push(dot);
                    }
                    //纠偏终点与输入终点的距离
                    if (resultObj.inputDots[1].pDot.x !== 114.50 || resultObj.inputDots[1].pDot.y !== 38.05) {
                        dot = [114.50, 38.05];
                        pathArr.push(dot);
                    }
                    resDiv += '<font color="#0000FF"><b>步行</b></font><font color="#FF0000">' + dis + '</font>米到达终点';
                }
                else if (edgeNum === 1) {
                    //将路径线信息存储进缓存数组
                    if (dot[0] !== pathObj.Edges[0].Dots[0].x || dot[1] !==
                        pathObj.Edges[0].Dots[0].y) {
                        dot = [pathObj.Edges[0].Dots[0].x, pathObj.Edges[0].Dots[0].y];
                        pathArr.push(dot);
                    }
                    var dotLen = pathObj.Edges[0].Dots.length;
                    for (var m = 1; m < dotLen; m++) {
                        dot = [pathObj.Edges[0].Dots[m].x, pathObj.Edges[0].Dots[m].y];
                        pathArr.push(dot);
                    }
                    //有路径线信息时，对路线信息进行解析
                    if (pathObj.Edges[0].FieldValus[13] !== "") {
                        resDiv += '<font color="#0000FF"><b>步行</b></font><font color="#FF0000">' + dis + '</font>米，';
                        resDiv += '到达' + pathObj.Edges[0].FieldValus[13] + '(' + pathObj.Edges[0].Dots[0].x + ',' + pathObj.Edges[0].Dots[0].y + '），<br/>经' + pathObj.Edges[0].FieldValus[13];
                    }
                    else {
                        //纠偏起点与纠偏终点的距离
                        if (resultObj.inputDots[1].pDot.x !== resultObj.inputDots[0].pDot.x || resultObj.inputDots[1].pDot.y !== resultObj.inputDots[0].pDot.y) {
                            dis += getDistance(resultObj.inputDots[0].pDot, resultObj.inputDots[1].pDot);
                        }
                        //纠偏终点与输入终点的距离
                        if (resultObj.inputDots[1].pDot.x !== 114.50 || resultObj.inputDots[1].pDot.y !== 38.05) {
                        }
                        resDiv += '<font color="#0000FF"><b>步行</b></font><font color="#FF0000">' + dis + '</font>米，';
                    }
                    resDiv += '到达终点';
                }
                else {
                    //有路径线信息时，对路线信息进行解析
                    if (dis !== 0) {
                        resDiv += '<font color="#0000FF"><b>步行</b></font><font color="#FF0000">' + dis + '</font>米，';
                    }
                    for (var i = 0; i < edgeNum - 1; i++) {
                        var edge = pathObj.Edges[i];
                        var edge1 = pathObj.Edges[i + 1];

                        if (i === 0) {
                            var dots = [edge.Dots[0].x, edge.Dots[0].y];
                            if (edge.FieldValus[13] !== "")
                                resDiv += '到达' + edge.FieldValus[13] + '(' + dots[0] + ',' + dots[1] + '），<br/>经' + edge.FieldValus[13];

                        }
                        if (i !== edgeNum - 2) {
                            if (edge.FieldValus[13] !== edge1.FieldValus[13] && edge1.FieldValus[13] !== "") {
                                var dots1 = [edge1.Dots[0].x, edge1.Dots[0].y];
                                if (edge.FieldValus[13] !== "")
                                    resDiv += '到达' + edge1.FieldValus[13] + '(' + dots1[0] + ',' + dots1[1] + ')，<br/>' + '经' + edge1.FieldValus[13];
                            }
                        }
                        else {
                            var edgeLen = edge1.Dots.length;
                            var dots4 = [edge1.Dots[edgeLen - 1].x, edge1.Dots[edgeLen - 1].y];
                            //终点解析
                            if (dots4[0] === 114.50 && dots4[1] === 38.05) {
                                resDiv += '<font color="#0000FF"><b>到达终点</b></font>(114.50,38.05)';
                            }
                            else {
                                var dis1 = 0;
                                //计算路径线最后一个点与纠偏终点之间的距离
                                if (dots4[0] !== resultObj.inputDots[1].pDot.x || dots4[1] !== resultObj.inputDots[1].pDot.y) {
                                    console.log(resultObj.inputDots[1].pDot.x);
                                    dis1 = getDistance(dots4, resultObj.inputDots[1].pDot);
                                }
                                //计算纠偏终点与输入终点之间的距离
                                if (resultObj.inputDots[1].pDot.x !== 114.49 || resultObj.inputDots[1].pDot.y !== 38.05) {
                                }
                                if (edge.FieldValus[13] !== edge1.FieldValus[13] && edge1.FieldValus[13] !== "" && dis1 !== 0) {
                                    resDiv += '到达' + edge1.FieldValus[13] + '(' + dots4[0] + ',' + dots4[1] + ')，最后步行<font color="#FF0000">' + dis1 + '</font>米到达终点(114.50,38.05)';
                                }
                                else {
                                    resDiv += '到达终点(114.50,38.05)';
                                }
                            }
                        }
                        //将路径线信息存储进缓存数组
                        var dotCount = pathObj.Edges[i].Dots.length;
                        for (var k = 0; k < dotCount; k++) {
                            if (k === 0 && i === 0) {
                                if (dot[0] !== pathObj.Edges[0].Dots[0].x || dot[1] !== pathObj.Edges[0].Dots[0].y) {
                                    dot = [pathObj.Edges[0].Dots[0].x, pathObj.Edges[0].Dots[0].y];
                                    pathArr.push(dot);
                                }
                            }
                            dot = [pathObj.Edges[i].Dots[k].x, pathObj.Edges[i].Dots[k].y];
                            pathArr.push(dot);
                        }
                    }
                    //添加最后一条路径信息
                    var dotCoun = pathObj.Edges[edgeNum - 1].Dots.length;
                    for (var n = 0; n < dotCoun; n++) {
                        dot = [pathObj.Edges[edgeNum - 1].Dots[n].x, pathObj.Edges[edgeNum - 1].Dots[n].y];
                        pathArr.push(dot);
                    }
                }
                //添加经过纠偏的终点
                if (resultObj.inputDots[1].pDot.x !== dot.x || resultObj.inputDots[1].pDot.y !==
                    dot.y) {
                    dot = [resultObj.inputDots[1].pDot.x, resultObj.inputDots[1].pDot.y];
                    pathArr.push(dot);
                }
                //绘制路径
                $("#resultInfo").append(resDiv);
                $("#resultInfo").css("border", "1px solid #1ab394");
                drawPath(pathArr);
            }
        }

        /**绘制路径
         *points绘制路径的点集
         */
        function drawPath(points) {
            if (points.length > 0) {
                var PointArray = new Array();
                //循环创建一个存放坐标的数组
                for (var PntLength = 0; PntLength < points.length; PntLength++) {
                    var a = points[PntLength][0];
                    var b = points[PntLength][1];
                    var dot = [b, a];
                    PointArray.push(dot);
                }
            }
            var polyline = L.polyline(PointArray, {color: 'red'}).addTo(map);
        }

        //根据两点坐标求实地距离计算，适用于经纬度
        function getDistance(dot1, dot2) {
            var radLat1 = parseFloat((dot1[0]) * (Math.PI) / 180.0);
            var radLat2 = parseFloat((dot2.x) * (Math.PI) / 180.0);
            var a = radLat1 - radLat2;
            var b = (dot1[1]) * Math.PI / 180.0 - (dot2.y) * Math.PI / 180.0;
            var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
            s = s * 6371229;
            s = Math.round(s * 10000) / 10000;
            return s;
        }
    </script>
</head>
<body onload="init()">
<div id="toolspanel" style="position: absolute; width: 20%; height: 100%; right: 0px;
        top: 0px">
    <input type="button" class="ButtonLib" value="网络分析" onclick="NetAnalysisOld()" style="margin: 5px auto;
            display: block; padding: 6px 12px"/>
    <div id="resultInfo" class="lineStyle" style="color: #1ab394; font-size: 12px; margin: 5px;">
        分析结果：<br/>
    </div>
</div>
<div id="leaf_map" style="position: absolute; width: 80%; height: 100%; left: 0px;
        top: 0px">
</div>
</body>
</html>
